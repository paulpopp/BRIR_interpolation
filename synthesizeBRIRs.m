% Synthesize BRIRs for a whole sphere generated by the SDM
%
% Paul Popp, TU Ilmenau 2023

clear all
close all
clc

addpath ./functions

binsim_default = struct('type','','listenerOrientation',[],'listenerPosition',[],'sourceOrientation',[],'sourcePosition',[], 'custom',[], 'filter', []);

availableAzimut = -180:5:180;
availableElevation = -45:5:45;

fs = 48000;

axis = 2;

synthesizedPositions = {  [0     -1.20   0];
                          [0     -0.85   0];
                          [0     -0.50   0];
                          [0     -0.15   0];
                          [0      0.20   0];
                          [0      0.55   0];
                          [0      0.90   0];
                          [0      1.25   0];
                          [0      1.60   0];
                          [0      1.95   0];
                          [0      2.30   0];
                          [0      2.65   0];
                          [0      3.00   0];
                          [0      3.35   0];
                          [0      3.70   0];
                          [0      4.05   0];
                          [0      4.40   0];
                          % [0.45   4.40   0];
                          [0.90   4.40   0];
                
                        };

sourcePositions = { [0.9    3.7    1.13];
                    [-0.9   -1.2   1.16];
                    };

sourceOrientations = { [90   0   0];
                       [270  0   0];
                       };

customs = { [0   0   0]};

data = struct2cell(load("..\data\synthesizedBRIRs\door_closed_1_GRID_binsim_struct.mat"));

for measureIdx=1 : length(data)
    measuredPositions{measureIdx} = data{measureIdx}.listenerPosition;
end

for synthIdx=1 : length(synthesizedPositions)
    % Check if current synthesizedPosition is already measured
    posInData = find(cellfun(@isequal, measuredPositions(:), repmat({synthesizedPositions{synthIdx}}, length(measuredPositions),1)));

    if ~isempty(posInData)
        eval(['binsim_' num2str(synthIdx) ' = data{posInData};']);
    else
        % tic
        disp(['Interpolating Pos: ', num2str(synthesizedPositions{synthIdx})])
        for distIdx=1 : length(measuredPositions)
            distance(distIdx) = pdist([measuredPositions{distIdx}; synthesizedPositions{synthIdx}]);
        end

        [~, interpPositions] = mink(distance,2);
        
        count = 0;
        for sourceIdx=1 : length(sourcePositions)
            tic
            dataSourceOnly_1 = filter_struct(data{interpPositions(1)}, 'sourcePosition', sourcePositions{sourceIdx});
            dataSourceOnly_2 = filter_struct(data{interpPositions(2)}, 'sourcePosition', sourcePositions{sourceIdx});
            for customIdx=1 : length(customs)
                dataSourceCustomOnly_1 = filter_struct(dataSourceOnly_1, 'custom', customs{customIdx});
                dataSourceCustomOnly_2 = filter_struct(dataSourceOnly_2, 'custom', customs{customIdx});
                for azIdx=1 : length(availableAzimut)
                    for elIdx=1 : length(availableElevation)
                        timer_1 = tic;
                        DS_1 = remove_zeros(filter_struct(filter_struct(dataSourceCustomOnly_1, 'listenerOrientation', [availableAzimut(azIdx), availableElevation(elIdx), 0]), 'type', 'DS').filter);
                        ER_1 = remove_zeros(filter_struct(filter_struct(dataSourceCustomOnly_1, 'listenerOrientation', [availableAzimut(azIdx), availableElevation(elIdx), 0]), 'type', 'ER').filter);
                        LR_1 = remove_zeros(filter_struct(dataSourceCustomOnly_1, 'type', 'LR').filter);
                        BRIR_1 = vertcat(DS_1, ER_1, LR_1);
                        
                        DS_2 = remove_zeros(filter_struct(filter_struct(dataSourceCustomOnly_2, 'listenerOrientation', [availableAzimut(azIdx), availableElevation(elIdx), 0]), 'type', 'DS').filter);
                        ER_2 = remove_zeros(filter_struct(filter_struct(dataSourceCustomOnly_2, 'listenerOrientation', [availableAzimut(azIdx), availableElevation(elIdx), 0]), 'type', 'ER').filter);
                        LR_2 = remove_zeros(filter_struct(dataSourceCustomOnly_2, 'type', 'LR').filter);
                        BRIR_2 = vertcat(DS_2, ER_2, LR_2);

                        mixingTime = length(DS_1) + length(ER_1);
                        
                        timer2 = tic;

                        newBRIR = interpolateBRIR_1D(BRIR_1, measuredPositions{interpPositions(1)}(axis), BRIR_2, measuredPositions{interpPositions(2)}(axis), synthesizedPositions{synthIdx}(axis), mixingTime, fs, 0);

                        disp(["Timer 2: ", toc(timer2)])

                        newDS = newBRIR(1:255,:);
                        newER = newBRIR(256:mixingTime,:);
                        newLR = newBRIR(mixingTime+1:end,:);


                        
                        count = count + 1;
                        binsim(count) = binsim_default;
                        binsim(count).type = 'DS';
                        binsim(count).listenerOrientation = [ availableAzimut(azIdx), availableElevation(elIdx) , 0 ];
                        binsim(count).listenerPosition = synthesizedPositions{synthIdx};% * 1000;
                        binsim(count).sourceOrientation = sourceOrientations{sourceIdx};
                        binsim(count).sourcePosition = sourcePositions{sourceIdx};% * 1000;
                        binsim(count).custom=customs{customIdx};
                        binsim(count).filter=single(squeeze(newDS));

                        count = count + 1;
                        binsim(count) = binsim_default;
                        binsim(count).type = 'ER';
                        binsim(count).listenerOrientation = [ availableAzimut(azIdx), availableElevation(elIdx) , 0 ];
                        binsim(count).listenerPosition = synthesizedPositions{synthIdx};% * 1000;
                        binsim(count).sourceOrientation = sourceOrientations{sourceIdx};
                        binsim(count).sourcePosition = sourcePositions{sourceIdx};% * 1000;
                        binsim(count).custom=customs{customIdx};
                        binsim(count).filter=single(squeeze(newER));

                        disp(["Timer 1: ", toc(timer_1)])
                    end
                end
            end
            count = count + 1;
            binsim(count) = binsim_default;
            binsim(count).type = 'LR';
            binsim(count).listenerOrientation = [ availableAzimut(azIdx), availableElevation(elIdx) , 0 ];
            binsim(count).listenerPosition = synthesizedPositions{synthIdx};% * 1000;
            binsim(count).sourceOrientation = sourceOrientations{sourceIdx};
            binsim(count).sourcePosition = sourcePositions{sourceIdx};% * 1000;
            binsim(count).custom=customs{customIdx};
            binsim(count).filter=single(squeeze(newLR));
        end
        eval(['binsim_' num2str(synthIdx) ' = binsim;']);
        clear binsim
        % toc
    end
end
